{
  "name": "chriswitko/dookie",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Williamsburg",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/LightBannerHeader",
      "article": "article/ReaderArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Montserrat, sans-serif",
    "heading": {
      "fontWeight": 600,
      "letterSpacing": "0.1em"
    },
    "colors": {
      "text": "#346",
      "background": "#fff",
      "primary": "#0099e0",
      "secondary": "#ab61ff",
      "highlight": "#f7b",
      "muted": "#fffab3",
      "border": "#ccd"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/chriswitko/dookie",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/dookie",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "dookie",
      "subhead": "Import / export mongodb databases in JSON",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "dookie: Import / export mongodb databases in JSON",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "chriswitko",
          "repo": "dookie"
        }
      ],
      "text": "v0.1.19"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p><img src=\"http://i.imgur.com/1scBld5.png\"></p>\n<p>Dookie lets you write MongoDB test fixtures in JSON or\n<a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> with extra syntactic sugar\n(extended JSON, variables, imports, inheritance, etc.).</p>\n<p><strong>Note:</strong> Dookie requires Node &gt;= 4.0.0. Dookie is <strong>not</strong> tested with nor\nexpected to work with Node 0.x or io.js.</p>\n<p><a href=\"https://circleci.com/gh/vkarpov15/dookie\"><img src=\"https://circleci.com/gh/vkarpov15/dookie.svg?style=svg\"></a></p>\n<h1>Examples</h1>\n<p>Dookie can be used either via <code>require(&apos;dookie&apos;);</code> in Node.js, or from the\ncommand line as an executable. Dookie&apos;s fundamental operations are:</p>\n<ol>\n<li>Push - clear out a database and insert some data</li>\n<li>Pull - write the contents of a database to a file</li>\n</ol>\n<p>Push is more interesting, so let&apos;s start with that. You can access the\npush functionality with the <code>require(&apos;dookie&apos;).push()</code> function, or\n<code>./node_modules/.bin/dookie push</code> from the command line.</p>\n<h2>It can import YAML data with .push()</h2>\n<p>Suppose you have a YAML file called <code>file.yml</code> that looks like below.</p>\n<pre><span class=\"hljs-attr\">people:</span>\n<span class=\"hljs-attr\">  - _id:</span>\n      <span class=\"hljs-comment\"># MongoDB extended JSON syntax</span>\n      <span class=\"hljs-string\">$oid:</span> <span class=\"hljs-number\">561</span><span class=\"hljs-string\">d87b8b260cf35147998ca</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">Axl</span> <span class=\"hljs-string\">Rose</span>\n<span class=\"hljs-attr\">  - _id:</span>\n      <span class=\"hljs-string\">$oid:</span> <span class=\"hljs-number\">561</span><span class=\"hljs-string\">d88f5b260cf35147998cb</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">Slash</span>\n\n<span class=\"hljs-attr\">bands:</span>\n<span class=\"hljs-attr\">  - _id:</span> <span class=\"hljs-string\">Guns</span> <span class=\"hljs-string\">N&apos;</span> <span class=\"hljs-string\">Roses</span>\n<span class=\"hljs-attr\">    members:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">Axl</span> <span class=\"hljs-string\">Rose</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">Slash</span></pre><p>Dookie can push this file to MongoDB for you.</p>\n<pre>\n    co(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>*(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;fs&apos;</span>);\n      <span class=\"hljs-keyword\">const</span> yaml = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;js-yaml&apos;</span>);\n\n      <span class=\"hljs-keyword\">const</span> contents = fs.readFileSync(<span class=\"hljs-string\">&apos;./example/basic/file.yml&apos;</span>);\n      <span class=\"hljs-keyword\">const</span> parsed = yaml.safeLoad(contents);\n\n      <span class=\"hljs-keyword\">const</span> mongodbUri = <span class=\"hljs-string\">&apos;mongodb://localhost:27017/test&apos;</span>;\n      <span class=\"hljs-comment\">// Insert data into dookie</span>\n      <span class=\"hljs-comment\">// Or, at the command line:</span>\n      <span class=\"hljs-comment\">// `dookie push --db test --file ./example/basic/file.yml`</span>\n      <span class=\"hljs-keyword\">yield</span> dookie.push(mongodbUri, parsed);\n\n      <span class=\"hljs-comment\">// ------------------------</span>\n      <span class=\"hljs-comment\">// Now that you&apos;ve pushed, you should see the data in MongoDB</span>\n      <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">yield</span> mongodb.MongoClient.connect(mongodbUri);\n      <span class=\"hljs-keyword\">const</span> collections = (<span class=\"hljs-keyword\">yield</span> db.listCollections().toArray()).\n        map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v.name).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> !v.startsWith(<span class=\"hljs-string\">&apos;system.&apos;</span>)).sort();\n      assert.equal(collections.length, <span class=\"hljs-number\">2</span>);\n      assert.equal(collections[<span class=\"hljs-number\">0</span>], <span class=\"hljs-string\">&apos;bands&apos;</span>);\n      assert.equal(collections[<span class=\"hljs-number\">1</span>], <span class=\"hljs-string\">&apos;people&apos;</span>);\n\n      <span class=\"hljs-keyword\">const</span> people = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;people&apos;</span>).find().toArray();\n      people.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">person</span>) =&gt;</span> { person._id = person._id.toString() });\n      assert.deepEqual(people, [\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">&apos;561d87b8b260cf35147998ca&apos;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Axl Rose&apos;</span> },\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">&apos;561d88f5b260cf35147998cb&apos;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Slash&apos;</span> }\n      ]);\n      <span class=\"hljs-keyword\">const</span> bands = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;bands&apos;</span>).find().toArray();\n      assert.deepEqual(bands, [\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">`Guns N&apos; Roses`</span>, <span class=\"hljs-attr\">members</span>: [<span class=\"hljs-string\">&apos;Axl Rose&apos;</span>, <span class=\"hljs-string\">&apos;Slash&apos;</span>] }\n      ]);\n    })</pre><h2>It can $require external files</h2>\n<p>Suppose you&apos;re a more advanced user and have some collections you want\nto re-use between data sets. For instance, you may want a common collection\nof users for your data sets. Dookie provides a <code>$require</code> keyword just\nfor that. Suppose you have a file called <code>parent.yml</code>:</p>\n<pre><span class=\"hljs-string\">$require:</span> <span class=\"hljs-string\">./child.yml</span>\n\n<span class=\"hljs-attr\">bands:</span>\n<span class=\"hljs-attr\">  - _id:</span> <span class=\"hljs-string\">Guns</span> <span class=\"hljs-string\">N&apos;</span> <span class=\"hljs-string\">Roses</span>\n<span class=\"hljs-attr\">    members:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">Axl</span> <span class=\"hljs-string\">Rose</span></pre><p>This file does a <code>$require</code> on <code>child.yml</code>, which looks like this:</p>\n<pre><span class=\"hljs-attr\">people:</span>\n<span class=\"hljs-attr\">  - _id:</span> <span class=\"hljs-string\">Axl</span> <span class=\"hljs-string\">Rose</span></pre><p>When you push <code>parent.yml</code>, dookie will pull in the &apos;people&apos; collection\nfrom <code>child.yml</code> as well.</p>\n<pre>\n    co(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>*(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">const</span> filename = <span class=\"hljs-string\">&apos;./example/$require/parent.yml&apos;</span>;\n      <span class=\"hljs-keyword\">const</span> contents = fs.readFileSync(filename);\n      <span class=\"hljs-keyword\">const</span> parsed = yaml.safeLoad(contents);\n\n      <span class=\"hljs-keyword\">const</span> mongodbUri = <span class=\"hljs-string\">&apos;mongodb://localhost:27017/test&apos;</span>;\n      <span class=\"hljs-comment\">// Insert data into dookie</span>\n      <span class=\"hljs-comment\">// Or, at the command line:</span>\n      <span class=\"hljs-comment\">// `dookie push --db test --file ./example/basic/parent.yml`</span>\n      <span class=\"hljs-keyword\">yield</span> dookie.push(mongodbUri, parsed, filename);\n\n      <span class=\"hljs-comment\">// ------------------------</span>\n      <span class=\"hljs-comment\">// Now that you&apos;ve pushed, you should see the data in MongoDB</span>\n      <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">yield</span> mongodb.MongoClient.connect(mongodbUri);\n\n      <span class=\"hljs-keyword\">const</span> people = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;people&apos;</span>).find().toArray();\n      assert.deepEqual(people, [{ <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">&apos;Axl Rose&apos;</span> }]);\n\n      <span class=\"hljs-keyword\">const</span> bands = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;bands&apos;</span>).find().toArray();\n      assert.deepEqual(bands, [\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">`Guns N&apos; Roses`</span>, <span class=\"hljs-attr\">members</span>: [<span class=\"hljs-string\">&apos;Axl Rose&apos;</span>] }\n      ]);\n    })</pre><h2>It supports inheritance via $extend</h2>\n<p>You can also re-use objects using the <code>$extend</code> keyword. Suppose each\nperson in the &apos;people&apos; collection should have a parent pointer to the\nband they&apos;re a part of. You can save yourself some copy/paste by using\n<code>$extend</code>:</p>\n<pre><span class=\"hljs-string\">$gnrMember:</span>\n<span class=\"hljs-attr\">  band:</span> <span class=\"hljs-string\">Guns</span> <span class=\"hljs-string\">N&apos;</span> <span class=\"hljs-string\">Roses</span>\n\n<span class=\"hljs-attr\">people:</span>\n<span class=\"hljs-bullet\">  -</span> <span class=\"hljs-string\">$extend:</span> <span class=\"hljs-string\">$gnrMember</span>\n<span class=\"hljs-attr\">    _id:</span> <span class=\"hljs-string\">Axl</span> <span class=\"hljs-string\">Rose</span>\n<span class=\"hljs-attr\">  - _id:</span> <span class=\"hljs-string\">Slash</span>\n    <span class=\"hljs-string\">$extend:</span> <span class=\"hljs-string\">$gnrMember</span></pre><pre>\n    co(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>*(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">const</span> filename = <span class=\"hljs-string\">&apos;./example/$extend.yml&apos;</span>;\n      <span class=\"hljs-keyword\">const</span> contents = fs.readFileSync(filename);\n      <span class=\"hljs-keyword\">const</span> parsed = yaml.safeLoad(contents);\n\n      <span class=\"hljs-keyword\">const</span> mongodbUri = <span class=\"hljs-string\">&apos;mongodb://localhost:27017/test&apos;</span>;\n      <span class=\"hljs-comment\">// Insert data into dookie</span>\n      <span class=\"hljs-comment\">// Or, at the command line:</span>\n      <span class=\"hljs-comment\">// `dookie push --db test --file ./example/$extend.yml`</span>\n      <span class=\"hljs-keyword\">yield</span> dookie.push(mongodbUri, parsed, filename);\n\n      <span class=\"hljs-comment\">// ------------------------</span>\n      <span class=\"hljs-comment\">// Now that you&apos;ve pushed, you should see the data in MongoDB</span>\n      <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">yield</span> mongodb.MongoClient.connect(mongodbUri);\n\n      <span class=\"hljs-keyword\">const</span> people = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;people&apos;</span>).find().toArray();\n      assert.deepEqual(people, [\n        { <span class=\"hljs-attr\">band</span>: <span class=\"hljs-string\">`Guns N&apos; Roses`</span>, <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">&apos;Axl Rose&apos;</span> },\n        { <span class=\"hljs-attr\">band</span>: <span class=\"hljs-string\">`Guns N&apos; Roses`</span>, <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-string\">&apos;Slash&apos;</span> }\n      ]);\n    })</pre><h2>It can evaluate code with $eval</h2>\n<p>Dookie also lets you evaluate code in your YAML. The code runs with the\ncurrent document as the context.</p>\n<pre><span class=\"hljs-attr\">people:</span>\n<span class=\"hljs-attr\">  - _id:</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">    firstName:</span> <span class=\"hljs-string\">Axl</span>\n<span class=\"hljs-attr\">    lastName:</span> <span class=\"hljs-string\">Rose</span>\n<span class=\"hljs-attr\">    name:</span>\n      <span class=\"hljs-string\">$eval:</span> <span class=\"hljs-string\">this.firstName</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">&apos; &apos;</span> <span class=\"hljs-string\">+</span> <span class=\"hljs-string\">this.lastName</span></pre><pre>\n    co(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>*(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">const</span> filename = <span class=\"hljs-string\">&apos;./example/$eval.yml&apos;</span>;\n      <span class=\"hljs-keyword\">const</span> contents = fs.readFileSync(filename);\n      <span class=\"hljs-keyword\">const</span> parsed = yaml.safeLoad(contents);\n\n      <span class=\"hljs-keyword\">const</span> mongodbUri = <span class=\"hljs-string\">&apos;mongodb://localhost:27017/test&apos;</span>;\n      <span class=\"hljs-comment\">// Insert data into dookie</span>\n      <span class=\"hljs-comment\">// Or, at the command line:</span>\n      <span class=\"hljs-comment\">// `dookie push --db test --file ./example/$eval.yml`</span>\n      <span class=\"hljs-keyword\">yield</span> dookie.push(mongodbUri, parsed, filename);\n\n      <span class=\"hljs-comment\">// ------------------------</span>\n      <span class=\"hljs-comment\">// Now that you&apos;ve pushed, you should see the data in MongoDB</span>\n      <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">yield</span> mongodb.MongoClient.connect(mongodbUri);\n\n      <span class=\"hljs-keyword\">const</span> people = <span class=\"hljs-keyword\">yield</span> db.collection(<span class=\"hljs-string\">&apos;people&apos;</span>).find().toArray();\n      assert.deepEqual(people, [\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&apos;Axl&apos;</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&apos;Rose&apos;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Axl Rose&apos;</span> }\n      ]);\n    })</pre><h2>It can pull() data out of MongoDB</h2>\n<p>The above examples show how dookie can <code>push()</code> data into MongoDB. Dookie\ncan also <code>pull()</code> data out of MongoDB in JSON format. Why not just use\nmongoexport or mongodump? Mongoexport can only export a single collection,\nmongodump exports hard-to-read binary data, and neither can be run from\nNode without <code>.exec()</code>. Dookie lets you transfer whole databases in\na human readable format, and <code>assert()</code> on the entire state of your\ndatabase in tests with ease.</p>\n<pre>\n    co(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>*(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">const</span> mongodbUri = <span class=\"hljs-string\">&apos;mongodb://localhost:27017/test&apos;</span>;\n      <span class=\"hljs-comment\">// Insert data into dookie</span>\n      <span class=\"hljs-comment\">// Or, at the command line:</span>\n      <span class=\"hljs-comment\">// `dookie pull --db test --file ./output.json`</span>\n      <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">yield</span> dookie.pull(mongodbUri);\n\n      assert.deepEqual(<span class=\"hljs-built_in\">Object</span>.keys(json), [<span class=\"hljs-string\">&apos;people&apos;</span>]);\n      assert.deepEqual(json.people, [\n        { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">&apos;Axl&apos;</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">&apos;Rose&apos;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&apos;Axl Rose&apos;</span> }\n      ]);\n    })</pre>"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/chriswitko/dookie",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/chriswitko",
          "text": "chriswitko"
        }
      ]
    }
  ]
}